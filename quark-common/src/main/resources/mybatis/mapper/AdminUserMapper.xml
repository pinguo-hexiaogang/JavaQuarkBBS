<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.quark.common.mapper.AdminUserMapper">
    <resultMap id="adminUserMap" type="AdminUser" autoMapping="true" >
        <id property="id" column="id"/>
        <collection property="roles" ofType="com.quark.common.entity.Role" autoMapping="true">
            <id property="id" column="role_role_id"/>
            <collection property="permissions" ofType="com.quark.common.entity.Permission" autoMapping="true">
                <id property="id" column="permission_id"/>
                <result property="name" column="permission_name"/>
            </collection>
            <collection property="adminUsers"
                        ofType="com.quark.common.entity.AdminUser"
                        column="role_id"
                        select="findAdminuserByRoleId">
                <id property="id" column="id"/>
            </collection>
        </collection>
    </resultMap>

    <sql id="adminUserSql">
        select
        adminuser.*,
        adminuser_role.*,
        role.id as role_role_id,
        role.name,
        role.description,
        permission.id as permission_id,
        permission.name as permission_name,
        permission.perurl,
        permission.sort,
        permission.type,
        permission.parentid
        from quark_adminuser as adminuser
        left outer join quark_adminuser_role as adminuser_role on adminuser.id=adminuser_role.adminuser_id
        left outer join quark_role as role on role.id = adminuser_role.role_id
        left outer join quark_role_permission as role_permission on role.id = role_permission.role_id
        left outer join quark_permission as permission on role_permission.permissions_id=permission.id
    </sql>
    <select id="findAdminuserByRoleId" resultMap="adminUserMap">
        <include refid="adminUserSql"></include>
        where adminuser_role.role_id=#{role_id}
    </select>
    <select id="findByUid" resultMap="adminUserMap">
        <include refid="adminUserSql"></include>
        where adminuser.id=#{id}
    </select>
    <select id="findByUsername" resultMap="adminUserMap">
        <include refid="adminUserSql"></include>
        where adminuser.username=#{username}
    </select>
    <select id="findAll" resultMap="adminUserMap">
        <include refid="adminUserSql"></include>
    </select>

    <select id="findByIds" resultMap="adminUserMap">
        <include refid="adminUserSql"></include>
        where adminuser.id in
        <foreach item="item" index="index" collection="ids"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    
    <update id="updateUsersEnable">
        update quark_adminuser
        set enable=
        <foreach collection="users" item="item" index="index"
                 separator=" " open="case" close="end">
            when id=#{item.id} then #{item.enable}
        </foreach>
        where id in
        <foreach collection="users" index="index" item="item"
                 separator="," open="(" close=")">
            #{item.id,jdbcType=BIGINT}
        </foreach>
    </update>
    <delete id="deleteAllRoleByUserId">
        delete from quark_adminuser_role
        where adminuser_id=#{userId}
    </delete>
    <insert id="insertUserRole">
        insert into
        quark_adminuser_role(adminuser_id,role_id) values
        <foreach item="item" collection="roleIds" separator=",">
            (#{userId},#{item})
        </foreach>
    </insert>
    <select id="findAdminUserByPage" resultType="AdminUser">
        select * from quark_adminuser
        limit #{start},#{length}
    </select>
    <delete id="deleteUserByIds">
        delete from quark_adminuser where id in
        <foreach item="item" collection="userIds" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <insert id="saveUser">
        insert into quark_adminuser(enable,password,username)
        values(#{user.enable},#{user.password},#{user.username})
    </insert>
    <select id="totalAdminUsers" resultType="int">
        select count(id) from quark_adminuser;
    </select>
</mapper>